```python
# app.py
from flask import Flask, request, jsonify
import sqlite3
import face_recognition
import numpy as np
import pickle
from datetime import datetime

app = Flask(__name__)
DB_NAME = "database/attendance.db"

# ---------------- Database Setup ----------------
def init_db():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS attendance (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT,
                    email TEXT,
                    role TEXT,
                    date TEXT,
                    status TEXT
                )""")
    conn.commit()
    conn.close()

init_db()

# ---------------- Face Recognition Utils ----------------
ENCODINGS_FILE = "models/encodings.pkl"

def load_encodings():
    try:
        with open(ENCODINGS_FILE, "rb") as f:
            return pickle.load(f)
    except:
        return {}

def save_encodings(encodings):
    with open(ENCODINGS_FILE, "wb") as f:
        pickle.dump(encodings, f)

@app.route('/')
def home():
    return {"message": "Attendance Backend Running"}

# Register a new face
@app.route('/register', methods=['POST'])
def register_face():
    data = request.json
    name = data["name"]
    email = data["email"]
    role = data["role"]
    encoding = np.array(data["encoding"])  # front-end sends face encoding

    encodings = load_encodings()
    encodings[email] = {"name": name, "role": role, "encoding": encoding.tolist()}
    save_encodings(encodings)

    return {"message": f"Face registered for {name}"}

# Mark attendance
@app.route('/mark', methods=['POST'])
def mark_attendance():
    data = request.json
    encoding = np.array(data["encoding"])  # received from UI (webcam face)

    encodings = load_encodings()
    known_encodings = [np.array(v["encoding"]) for v in encodings.values()]
    emails = list(encodings.keys())

    matches = face_recognition.compare_faces(known_encodings, encoding)
    if True in matches:
        idx = matches.index(True)
        email = emails[idx]
        name = encodings[email]["name"]
        role = encodings[email]["role"]

        conn = sqlite3.connect(DB_NAME)
        c = conn.cursor()
        c.execute("INSERT INTO attendance (name,email,role,date,status) VALUES (?,?,?,?,?)",
                  (name, email, role, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "Present"))
        conn.commit()
        conn.close()

        return {"message": f"Attendance marked for {name}"}
    else:
        return {"error": "Face not recognized"}, 400

# Fetch attendance records
@app.route('/records', methods=['GET'])
def get_records():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT * FROM attendance")
    rows = c.fetchall()
    conn.close()

    records = [{"id": r[0], "name": r[1], "email": r[2], "role": r[3], "date": r[4], "status": r[5]} for r in rows]
    return jsonify(records)

if __name__ == '__main__':
    app.run(debug=True)
```
